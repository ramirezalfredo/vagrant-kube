{
    "kubeadm_init": {
        "changed": true,
        "cmd": "kubeadm init --pod-network-cidr 192.168.0.0/16",
        "delta": "0:01:22.247323",
        "end": "2019-02-15 01:40:14.317820",
        "failed": false,
        "rc": 0,
        "start": "2019-02-15 01:38:52.070497",
        "stderr": "I0215 01:38:53.161670    1965 version.go:236] remote version is much newer: v1.13.3; falling back to: stable-1.12",
        "stderr_lines": [
            "I0215 01:38:53.161670    1965 version.go:236] remote version is much newer: v1.13.3; falling back to: stable-1.12"
        ],
        "stdout": "[init] using Kubernetes version: v1.12.5\n[preflight] running pre-flight checks\n[preflight/images] Pulling images required for setting up a Kubernetes cluster\n[preflight/images] This might take a minute or two, depending on the speed of your internet connection\n[preflight/images] You can also perform this action in beforehand using 'kubeadm config images pull'\n[kubelet] Writing kubelet environment file with flags to file \"/var/lib/kubelet/kubeadm-flags.env\"\n[kubelet] Writing kubelet configuration to file \"/var/lib/kubelet/config.yaml\"\n[preflight] Activating the kubelet service\n[certificates] Generated etcd/ca certificate and key.\n[certificates] Generated etcd/healthcheck-client certificate and key.\n[certificates] Generated etcd/server certificate and key.\n[certificates] etcd/server serving cert is signed for DNS names [kube-master localhost] and IPs [127.0.0.1 ::1]\n[certificates] Generated etcd/peer certificate and key.\n[certificates] etcd/peer serving cert is signed for DNS names [kube-master localhost] and IPs [192.168.0.120 127.0.0.1 ::1]\n[certificates] Generated apiserver-etcd-client certificate and key.\n[certificates] Generated ca certificate and key.\n[certificates] Generated apiserver-kubelet-client certificate and key.\n[certificates] Generated apiserver certificate
and key.\n[certificates] apiserver serving cert is signed for DNS names [kube-master kubernetes kubernetes.default kubernetes.default.svc kubernetes.default.svc.cluster.local] and IPs [10.96.0.1 192.168.0.120]\n[certificates] Generated front-proxy-ca certificate and key.\n[certificates] Generated front-proxy-client certificate and key.\n[certificates] valid certificates and keys now exist in \"/etc/kubernetes/pki\"\n[certificates] Generated sa key and public key.\n[kubeconfig] Wrote KubeConfig file to disk: \"/etc/kubernetes/admin.conf\"\n[kubeconfig] Wrote KubeConfig file to disk: \"/etc/kubernetes/kubelet.conf\"\n[kubeconfig] Wrote KubeConfig file to disk: \"/etc/kubernetes/controller-manager.conf\"\n[kubeconfig] Wrote KubeConfig file to disk: \"/etc/kubernetes/scheduler.conf\"\n[controlplane] wrote Static Pod manifest for component kube-apiserver to \"/etc/kubernetes/manifests/kube-apiserver.yaml\"\n[controlplane] wrote Static Pod manifest for component kube-controller-manager to \"/etc/kubernetes/manifests/kube-controller-manager.yaml\"\n[controlplane] wrote Static Pod manifest for component kube-scheduler to \"/etc/kubernetes/manifests/kube-scheduler.yaml\"\n[etcd] Wrote Static Pod manifest for a local etcd instance to \"/etc/kubernetes/manifests/etcd.yaml\"\n[init] waiting for the kubelet to boot up the control plane as Static Pods from directory \"/etc/kubernetes/manifests\" \n[init] this might take a minute or longer if the control plane images have to be pulled\n[apiclient] All control plane components are healthy after 56.505664 seconds\n[uploadconfig] storing the configuration used in ConfigMap \"kubeadm-config\" in the \"kube-system\" Namespace\n[kubelet] Creating a ConfigMap \"kubelet-config-1.12\" in namespace kube-system with the configuration for the kubelets in the cluster\n[markmaster] Marking the node kube-master as master by adding the label \"node-role.kubernetes.io/master=''\"\n[markmaster] Marking the node kube-master as master by adding the taints [node-role.kubernetes.io/master:NoSchedule]\n[patchnode] Uploading the CRI Socket information \"/var/run/dockershim.sock\" to the Node API object \"kube-master\" as an annotation\n[bootstraptoken] using token: dj23ow.u9388mdkkd824tfh\n[bootstraptoken] configured RBAC rules to allow Node Bootstrap tokens to post CSRs in order for nodes to get long term certificate credentials\n[bootstraptoken] configured RBAC rules to allow the csrapprover controller automatically approve CSRs from a Node Bootstrap Token\n[bootstraptoken] configured RBAC rules to allow certificate rotation for all node client certificates in the cluster\n[bootstraptoken] creating the
\"cluster-info\" ConfigMap in the \"kube-public\" namespace\n[addons] Applied essential addon: CoreDNS\n[addons] Applied essential addon: kube-proxy\n\nYour Kubernetes master has initialized successfully!\n\nTo start using your cluster, you need to run the following as a regular user:\n\n  mkdir -p $HOME/.kube\n  sudo cp -i /etc/kubernetes/admin.conf $HOME/.kube/config\n  sudo chown $(id -u):$(id -g) $HOME/.kube/config\n\nYou should now deploy a pod network to the cluster.\nRun \"kubectl apply -f [podnetwork].yaml\" with one of the options listed at:\n  https://kubernetes.io/docs/concepts/cluster-administration/addons/\n\nYou can now join any number of machines by running the following on each node\nas root:\n\n  kubeadm join 192.168.0.120:6443 --token dj23ow.u9388mdkkd824tfh --discovery-token-ca-cert-hash sha256:2ee06987032a1324683b555e7933c0faf1c6d3c27b0900fa25af23a388cc780c",
        "stdout_lines": [
            "[init] using Kubernetes version: v1.12.5",
            "[preflight] running pre-flight checks",
            "[preflight/images] Pulling images required for setting up a Kubernetes cluster",
            "[preflight/images] This might take a minute or two, depending on the speed of your internet connection",
            "[preflight/images] You can also perform this action in beforehand using 'kubeadm config images pull'",
            "[kubelet] Writing kubelet environment file with flags to file \"/var/lib/kubelet/kubeadm-flags.env\"",
            "[kubelet] Writing kubelet configuration to file \"/var/lib/kubelet/config.yaml\"",
            "[preflight] Activating the kubelet service",
            "[certificates] Generated etcd/ca certificate and key.",
            "[certificates] Generated etcd/healthcheck-client certificate and key.",
            "[certificates] Generated etcd/server certificate and key.",
            "[certificates] etcd/server serving cert is signed for DNS names [kube-master localhost] and IPs [127.0.0.1 ::1]",
            "[certificates] Generated etcd/peer certificate and key.",
            "[certificates] etcd/peer serving cert is signed for DNS names [kube-master localhost] and IPs [192.168.0.120 127.0.0.1 ::1]",
            "[certificates] Generated apiserver-etcd-client certificate and key.",
            "[certificates] Generated ca certificate and key.",
            "[certificates] Generated apiserver-kubelet-client certificate and key.",
            "[certificates] Generated apiserver certificate and key.",
            "[certificates] apiserver serving cert is signed for DNS names [kube-master kubernetes kubernetes.default kubernetes.default.svc kubernetes.default.svc.cluster.local] and IPs [10.96.0.1 192.168.0.120]",
            "[certificates] Generated front-proxy-ca certificate and key.",
            "[certificates] Generated front-proxy-client certificate and key.",
            "[certificates] valid certificates and keys now exist in \"/etc/kubernetes/pki\"",
            "[certificates] Generated sa key and public key.",
            "[kubeconfig] Wrote KubeConfig file to disk: \"/etc/kubernetes/admin.conf\"",
            "[kubeconfig] Wrote KubeConfig file to disk: \"/etc/kubernetes/kubelet.conf\"",
            "[kubeconfig] Wrote KubeConfig file to disk: \"/etc/kubernetes/controller-manager.conf\"",
            "[kubeconfig] Wrote KubeConfig file to disk: \"/etc/kubernetes/scheduler.conf\"",
            "[controlplane] wrote Static Pod manifest for component kube-apiserver to \"/etc/kubernetes/manifests/kube-apiserver.yaml\"",
            "[controlplane] wrote Static Pod manifest for component kube-controller-manager to \"/etc/kubernetes/manifests/kube-controller-manager.yaml\"",
            "[controlplane] wrote Static Pod manifest for component kube-scheduler to \"/etc/kubernetes/manifests/kube-scheduler.yaml\"",
            "[etcd] Wrote Static Pod manifest for a local etcd instance to \"/etc/kubernetes/manifests/etcd.yaml\"",
            "[init] waiting for the kubelet to boot up the control plane as Static Pods from directory \"/etc/kubernetes/manifests\" ",
            "[init] this might take a minute or longer if the control plane images have to be pulled",
            "[apiclient] All control plane components are healthy after 56.505664 seconds",
            "[uploadconfig] storing the configuration used in ConfigMap \"kubeadm-config\" in the \"kube-system\" Namespace",
            "[kubelet] Creating a ConfigMap \"kubelet-config-1.12\" in namespace kube-system with the configuration for the kubelets in the cluster",
            "[markmaster] Marking the node kube-master as master by adding the label \"node-role.kubernetes.io/master=''\"",
            "[markmaster] Marking the node kube-master as master by adding the taints [node-role.kubernetes.io/master:NoSchedule]",
            "[patchnode] Uploading the CRI Socket information \"/var/run/dockershim.sock\" to the Node API object \"kube-master\" as an annotation",            "[bootstraptoken] using token: dj23ow.u9388mdkkd824tfh",
            "[bootstraptoken] configured RBAC rules to allow Node Bootstrap tokens to post CSRs in order for nodes to get long term certificate credentials",
            "[bootstraptoken] configured RBAC rules to allow the csrapprover controller automatically approve CSRs from a Node Bootstrap Token",
            "[bootstraptoken] configured RBAC rules to allow certificate rotation for all node client certificates in the cluster",
            "[bootstraptoken] creating the \"cluster-info\" ConfigMap in the \"kube-public\" namespace",
            "[addons] Applied essential addon: CoreDNS",
            "[addons] Applied essential addon: kube-proxy",
            "",
            "Your Kubernetes master has initialized successfully!",
            "",
            "To start using your cluster, you need to run the following as a regular user:",
            "",
            "  mkdir -p $HOME/.kube",
            "  sudo cp -i /etc/kubernetes/admin.conf $HOME/.kube/config",
            "  sudo chown $(id -u):$(id -g) $HOME/.kube/config",
            "",
            "You should now deploy a pod network to the cluster.",
            "Run \"kubectl apply -f [podnetwork].yaml\" with one of the options listed at:",
            "  https://kubernetes.io/docs/concepts/cluster-administration/addons/",
            "",
            "You can now join any number of machines by running the following on each node",
            "as root:",
            "",
            "  kubeadm join 192.168.0.120:6443 --token dj23ow.u9388mdkkd824tfh --discovery-token-ca-cert-hash sha256:2ee06987032a1324683b555e7933c0faf1c6d3c27b0900fa25af23a388cc780c"
        ]
    }
}
